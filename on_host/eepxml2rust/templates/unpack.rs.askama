<%- macro enum_name(tp, enum_prop) -%>
    <$ tp|typecasename(cs) $>Prop<$ enum_prop.common.name|pascal_case $>
<%- endmacro -%>


use crate::max_array::MaxArray;


macro_rules! implement_horner {
    ($name:ident, $type:ty, $zero:expr, $one:expr, $two:expr $(, $max_bits:expr)?) => {
        fn $name(&self, lowest_bit_index: usize, bit_count: usize) -> Option<$ "<$type>" $> {
            $(assert!(bit_count <= $max_bits);)?
            let mut value = $zero;
            let mut factor = $one;
            for i in 0..bit_count {
                if self.bit_is_set(lowest_bit_index + bit_count - (i + 1))? {
                    value += factor;
                }
                if i < bit_count-1 {
                    factor *= $two;
                }
            }
            Some(value)
        }
    };
}


trait BitTwiddling {
    /// Returns whether the bit at the given index is set.
    fn bit_is_set(&self, bit_index: usize) -> Option<bool>;

    fn bool_from_bits(&self, bit_index: usize, bit_count: usize) -> Option<bool> {
        assert!(bit_count <= 1);
        if bit_count == 1 {
            self.bit_is_set(bit_index)
        } else {
            None
        }
    }

    implement_horner!(u8_from_bits, u8, 0, 1, 2, 8);
    implement_horner!(u16_from_bits, u16, 0, 1, 2, 16);
    implement_horner!(u32_from_bits, u32, 0, 1, 2, 32);
    implement_horner!(u64_from_bits, u64, 0, 1, 2, 64);
    implement_horner!(f64_from_bits, f64, 0.0, 1.0, 2.0);
}
impl<'a> BitTwiddling for &'a [u8] {
    // this implementation assumes that bytes are in little-endian order,
    // i.e. from least to most significant;
    // the bits within a byte are also considered to be little-endian
    // (index 0 is LSb of self[0], index 7 is MSb of self[0], index 8 is LSb of self[1], etc.)

    fn bit_is_set(&self, bit_index: usize) -> Option<bool> {
        let byte_index = bit_index / 8;
        let bit_in_byte_index = bit_index % 8;
        if byte_index >= self.len() {
            return None;
        }

        Some(self[byte_index] & (1 << bit_in_byte_index) != 0)
    }
}


fn range_scale(mut value: f64, min_range: f64, max_range: f64, min_scale: f64, max_scale: f64) -> f64 {
    let bottom_range = min_range.min(max_range);
    let top_range = min_range.max(max_range);
    if value < bottom_range {
        value = bottom_range;
    }
    if value > top_range {
        value = top_range;
    }

    let value_zeroed = value - min_range;
    let value_zeroed_scaled = value_zeroed * (max_scale - min_scale) / (max_range - min_range);
    let value_scaled = value_zeroed_scaled + min_scale;
    value_scaled
}

/// A variable with a raw and a scaled value.
#[derive(Clone, Copy, Debug, PartialEq, PartialOrd)]
pub struct ScaledVariable {
    pub raw: f64,
    pub scaled: f64,
}

<% for rorg in rorgs %>
/// <$ rorg.name $> (<$ rorg.code|hex $>)
#[allow(non_snake_case)]
pub mod rorg<$ rorg.code|hex $> {
    #[allow(unused)] use super::{BitTwiddling, MaxArray, range_scale, ScaledVariable};
    <%- for func in rorg.funcs %>
    /// <$ func.name $> (<$ rorg.code|hex $>-<$ func.code|hex $>)
    pub mod func<$ func.code|hex $> {
        #[allow(unused)] use super::{BitTwiddling, MaxArray, range_scale, ScaledVariable};

        <%- for tp in func.types %>
        <%- for cs in tp.cases %>
        /// <$ tp.name $> (<$ rorg.code|hex $>-<$ func.code|hex $>-<$ tp.code|hex $>)<% if let Some(csnum) = cs.number %>, case <$ csnum $><% endif %>
        #[derive(Clone, Copy)]
        pub struct <$ tp|typecasename(cs) $><'b> {
            reversed_bytes: &'b [u8],
        }
        impl<'b> <$ tp|typecasename(cs) $><'b> {
            pub fn new(reversed_bytes: &'b [u8]) -> Self {
                Self { reversed_bytes }
            }
            <%- for property in cs.properties %>

            /// Get the raw <$ property.common().name $> value.
            pub fn get_<$ property.common().name|snake_case $>_raw(&self) -> Option<<$ property.common().raw_primitive_type $>> {
                self.reversed_bytes.<$ property.common().raw_primitive_type $>_from_bits(<$ property.common().lowest_bit_index $>, <$ property.common().bit_count $>)
            }

            <%- if let Property::Numeric(num_prop) = property %>
            /// Get the <$ property.common().name $> value<% if let Some(u) = property.common().unit %> in units of <$ u $><% endif %>.
            pub fn get_<$ num_prop.common.name|snake_case $>(&self) -> Option<ScaledVariable> {
                let raw_value = self.get_<$ num_prop.common.name|snake_case $>_raw()? as f64;
                Some(ScaledVariable {
                    raw: raw_value,
                    scaled: range_scale(raw_value, <$ num_prop.min_range|dec $>, <$ num_prop.max_range|dec $>, <$ num_prop.min_scale|dec $>, <$ num_prop.max_scale|dec $>),
                })
            }
            <%- else if let Property::Enumerated(enum_prop) = property %>
            /// Get the <$ property.common().name $> value<% if let Some(u) = property.common().unit %> in units of <$ u $><% endif %>.
            pub fn get_<$ enum_prop.common.name|snake_case $>(&self) -> Option<<% call enum_name(tp, enum_prop) %>> {
                let raw_value = self.get_<$ enum_prop.common.name|snake_case $>_raw()?;
                Some(raw_value.into())
            }
            <%- endif %>
            <%- endfor %>
        }
        impl<'b> ::core::fmt::Debug for <$ tp|typecasename(cs) $><'b> {
            fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                f.debug_struct("<$ tp|typecasename(cs) $>")
                    <%- for property in cs.properties %>
                    <%- if let Property::Numeric(num_prop) = property %>
                    .field("<$ num_prop.common.name|snake_case $>", &self.get_<$ num_prop.common.name|snake_case $>())
                    <%- else if let Property::Enumerated(enum_prop) = property %>
                    .field("<$ enum_prop.common.name|snake_case $>", &self.get_<$ enum_prop.common.name|snake_case $>())
                    <%- else if let Property::RawOnly(raw_only_prop) = property %>
                    .field("<$ raw_only_prop.common.name|snake_case $>", &self.get_<$ raw_only_prop.common.name|snake_case $>_raw())
                    <%- endif %>
                    <%- endfor %>
                    .finish()
            }
        }
        <%- for property in cs.properties %><% if let Property::Enumerated(enum_prop) = property %>
        #[derive(Clone, Copy, Debug)]
        #[allow(non_camel_case_types)]
        pub enum <% call enum_name(tp, enum_prop) %> {
            <%- for value in enum_prop.values %>
            <%- if let EnumValue::Const(cev) = value %>
            <$ cev.name_pascal|pascal_fallback(cev.value) $>,
            <%- else if let EnumValue::Ranged(rev) = value %>
            <$ rev.name_pascal|pascal_fallback(rev.min_range.to_string().as_str()) $> { raw: <$ enum_prop.common.raw_primitive_type $>, scaled: f64 },
            <%- endif %>
            <%- endfor %>
            _Other(<$ enum_prop.common.raw_primitive_type $>),
        }
        impl From<<$ enum_prop.common.raw_primitive_type $>> for <% call enum_name(tp, enum_prop) %> {
            fn from(raw_value: <$ enum_prop.common.raw_primitive_type $>) -> Self {
                match raw_value {
                    <%- for value in enum_prop.values %>
                    <%- if let EnumValue::Const(cev) = value %>
                    <$ cev.value $> => Self::<$ cev.name_pascal|pascal_fallback(cev.value) $>,
                    <%- else if let EnumValue::Ranged(rev) = value %>
                    <$ rev.min_range $>..=<$ rev.max_range $> => Self::<$ rev.name_pascal|pascal_fallback(rev.min_range.to_string().as_str()) $> {
                        raw: raw_value,
                        scaled: range_scale(raw_value as f64, <$ rev.min_range|dec $>, <$ rev.max_range|dec $>, <$ rev.min_scale|dec $>, <$ rev.max_scale|dec $>),
                    },
                    <%- endif %>
                    <%- endfor %>
                    #[allow(unreachable_patterns)] other => Self::_Other(other),
                }
            }
        }
        impl From<<% call enum_name(tp, enum_prop) %>> for <$ enum_prop.common.raw_primitive_type $> {
            fn from(enum_value: <% call enum_name(tp, enum_prop) %>) -> Self {
                match enum_value {
                    <%- for value in enum_prop.values %>
                    <%- if let EnumValue::Const(cev) = value %>
                    <% call enum_name(tp, enum_prop) %>::<$ cev.name_pascal|pascal_fallback(cev.value) $> => <$ cev.value $>,
                    <%- else if let EnumValue::Ranged(rev) = value %>
                    <% call enum_name(tp, enum_prop) %>::<$ rev.name_pascal|pascal_fallback(rev.min_range.to_string().as_str()) $> { raw, .. } => raw,
                    <%- endif %>
                    <%- endfor %>
                    <% call enum_name(tp, enum_prop) %>::_Other(other) => other,
                }
            }
        }
        impl ::core::cmp::PartialEq for <% call enum_name(tp, enum_prop) %> {
            fn eq(&self, other: &<% call enum_name(tp, enum_prop) %>) -> bool {
                <$ enum_prop.common.raw_primitive_type $>::from(*self).eq(&<$ enum_prop.common.raw_primitive_type $>::from(*other))
            }
        }
        impl ::core::cmp::Eq for <% call enum_name(tp, enum_prop) %> {}
        impl ::core::cmp::PartialOrd for <% call enum_name(tp, enum_prop) %> {
            fn partial_cmp(&self, other: &<% call enum_name(tp, enum_prop) %>) -> Option<::core::cmp::Ordering> {
                <$ enum_prop.common.raw_primitive_type $>::from(*self).partial_cmp(&<$ enum_prop.common.raw_primitive_type $>::from(*other))
            }
        }
        impl ::core::cmp::Ord for <% call enum_name(tp, enum_prop) %> {
            fn cmp(&self, other: &<% call enum_name(tp, enum_prop) %>) -> ::core::cmp::Ordering {
                <$ enum_prop.common.raw_primitive_type $>::from(*self).cmp(&<$ enum_prop.common.raw_primitive_type $>::from(*other))
            }
        }
        <%- endif %><% endfor %>
        <%- endfor %>
        <%- endfor %>
    }

    #[derive(Clone, Copy, Debug)]
    pub enum Func<$ func.code|hex $><'b> {
        <%- for tp in func.types %>
        <%- for cs in tp.cases %>
        <$ tp|typecasename(cs) $>(func<$ func.code|hex $>::<$ tp|typecasename(cs) $><'b>),
        <%- endfor %>
        <%- endfor %>
    }
    impl<'b> Func<$ func.code|hex $><'b> {
        <%- for tp in func.types %>
        pub fn type<$ tp.code|hex $>_from_reversed_bytes(reversed_bytes: &'b [u8]) -> MaxArray<Self, <$ tp.cases.len() $>> {
            let mut ret = MaxArray::new();
            <%- for cs in tp.cases %>
            ret.push(Self::<$ tp|typecasename(cs) $>(
                func<$ func.code|hex $>::<$ tp|typecasename(cs) $>::new(reversed_bytes)
            )).unwrap();
            <%- endfor %>
            ret
        }
        <%- endfor %>

        pub fn from_reversed_bytes(type_code: u8, reversed_bytes: &'b [u8]) -> Option<MaxArray<Self, <$ func.max_cases_per_type() $>>> {
            match type_code {
                <%- for tp in func.types %>
                0x<$ tp.code|hex $> => {
                    Some(MaxArray::from_iter_or_panic(
                        Self::type<$ tp.code|hex $>_from_reversed_bytes(reversed_bytes)
                            .iter()
                            .map(|b| *b)
                            .peekable()
                    ))
                },
                <%- endfor %>
                _ => None,
            }
        }
    }
    <%- endfor %>
}

#[derive(Clone, Copy, Debug)]
pub enum Rorg<$ rorg.code|hex $><'b> {
    <%- for func in rorg.funcs %>
    Func<$ func.code|hex $>(rorg<$ rorg.code|hex $>::Func<$ func.code|hex $><'b>),
    <%- endfor %>
}
impl<'b> Rorg<$ rorg.code|hex $><'b> {
    pub fn from_reversed_bytes(func_code: u8, type_code: u8, reversed_bytes: &'b [u8]) -> Option<MaxArray<Self, <$ rorg.max_cases_per_type() $>>> {
        match func_code {
            <%- for func in rorg.funcs %>
            0x<$ func.code|hex $> => {
                Some(MaxArray::from_iter_or_panic(
                    rorg<$ rorg.code|hex $>::Func<$ func.code|hex $>::from_reversed_bytes(type_code, reversed_bytes)?
                        .iter()
                        .map(|f| Self::Func<$ func.code|hex $>(*f))
                        .peekable()
                ))
            },
            <%- endfor %>
            _ => None,
        }
    }
}
<%- endfor %>

#[derive(Clone, Copy, Debug)]
pub enum Eep<'b> {
    <%- for rorg in rorgs %>
    Rorg<$ rorg.code|hex $>(Rorg<$ rorg.code|hex $><'b>),
    <%- endfor %>
}
impl<'b> Eep<'b> {
    pub fn from_reversed_bytes(rorg_code: u8, func_code: u8, type_code: u8, reversed_bytes: &'b [u8]) -> Option<MaxArray<Self, <$ self.max_cases_per_type() $>>> {
        match rorg_code {
            <%- for rorg in rorgs %>
            0x<$ rorg.code|hex $> => {
                Some(MaxArray::from_iter_or_panic(
                    Rorg<$ rorg.code|hex $>::from_reversed_bytes(func_code, type_code, reversed_bytes)?
                        .iter()
                        .map(|r| Self::Rorg<$ rorg.code|hex $>(*r))
                        .peekable()
                ))
            },
            <%- endfor %>
            _ => None,
        }
    }
}
